import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"

group = "com.transferwise.common"

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation 'org.projectlombok:lombok'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.3'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.enabled false
        html.enabled true
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file('../spotbugs-exclude.xml')
    
    reports {
        xml.enabled false
        html.enabled true
    }
}

clean.doFirst {
    delete "out"
}

yamlValidator {
    searchPaths = ['src']
    allowDuplicates = false
    searchRecursive = true
}